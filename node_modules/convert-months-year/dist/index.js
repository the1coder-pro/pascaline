'use strict';

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

module.exports = function () {
  function _class() {
    classCallCheck(this, _class);
  }

  createClass(_class, null, [{
    key: 'getYearsFromMonth',
    value: function getYearsFromMonth(value) {
      return {
        years: parseInt(value, 10) > 12 ? value / 12 | 0 : 0,
        months: parseInt(value, 10) > 12 ? value % 12 : parseInt(value, 10)
      };
    }
  }, {
    key: 'getMonthsFromYear',
    value: function getMonthsFromYear(value) {
      return {
        months: typeof value === 'string' && value.indexOf('.') >= 0 ? parseInt(value.split('.')[0] * 12, 10) + parseInt(value.split('.')[1], 10) : Number(value) === value && value % 1 !== 0 ? parseInt(value.toString().split('.')[0] * 12, 10) + parseInt(value.toString().split('.')[1], 10) : value * 12
      };
    }
  }, {
    key: 'daysInMonth',
    value: function daysInMonth(month, year) {
      return new Date(year, month, 0).getDate();
    }
  }, {
    key: 'isLeapYear',
    value: function isLeapYear(year) {
      return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
    }
  }, {
    key: 'getNumberOfWeekEnds',
    value: function getNumberOfWeekEnds(year, mon) {
      var saturdays = [];
      var sundays = [];
      var month = mon - 1;
      for (var i = 0; i <= new Date(year, month, 0).getDate(); i++) {
        var date = new Date(year, month, i);
        if (date.getDay() == 6 && date.getMonth() === parseInt(month, 10)) {
          saturdays.push(date);
        } else if (date.getDay() == 0 && date.getMonth() === parseInt(month, 10)) {
          sundays.push(date);
        }
      }      return { saturdays: saturdays.length, sundays: sundays.length, saturdaysDates: saturdays, sundaysDates: sundays };
    }
  }, {
    key: 'getRemainingDaysInMonth',
    value: function getRemainingDaysInMonth() {
      var date = new Date();
      var time = new Date(date.getTime());
      time.setMonth(date.getMonth() + 1);
      time.setDate(0);
      return time.getDate() > date.getDate() ? time.getDate() - date.getDate() : 0;
    }
  }, {
    key: 'getRemainingDaysInYear',
    value: function getRemainingDaysInYear() {
      var today = new Date();
      var lastDayOfYear = new Date(today.getFullYear(), 11, 31);
      return Math.ceil((lastDayOfYear.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));
    }
  }]);
  return _class;
}();
//# sourceMappingURL=index.js.map
